init:
- appveyor version
- sh: echo $APPVEYOR_BUILD_WORKER_CLOUD
- sh: echo $APPVEYOR_BUILD_WORKER_IMAGE
- sh: |
    # Only use colors if connected to a terminal
    if [ -t 1 ]; then
      RED=$(printf '\033[31m')
      GREEN=$(printf '\033[32m')
      YELLOW=$(printf '\033[33m')
      BLUE=$(printf '\033[34m')
      BOLD=$(printf '\033[1m')
      RESET=$(printf '\033[m')
      NC=$(printf '\033[m')
    else
      RED=""
      GREEN=""
      YELLOW=""
      BLUE=""
      BOLD=""
      RESET=""
      NC=""
    fi
    
test_script:
- sh: |
    declare JDK_VERSIONS=( "7" "8" "9" "10" "11" "12" "13" "14" )
    declare -A VERSIONS
    VERSIONS["7"]="1.7.0"
    VERSIONS["8"]="1.8.0"
    VERSIONS["9"]="9.0.4"
    VERSIONS["10"]="(javac|build) 10"
    VERSIONS["11"]="(javac|build) 11"
    VERSIONS["12"]="(javac|build) 12"
    VERSIONS["13"]="(javac|build) 13"
    VERSIONS["14"]="(javac|build) 14"
    for v in "${JDK_VERSIONS[@]}"; do
        JVAR=JAVA_HOME_${v}_X64
        export JAVA_HOME=${!JVAR}
        export PATH=$JAVA_HOME/bin:$PATH
        java -version
        javac -version
        if [[ $(java -version 2>&1) =~ ${VERSIONS[$v]} ]] && [[ $(javac -version 2>&1) =~ ${VERSIONS[$v]} ]]; then
            echo "${GREEN}Version is Correct${NC}"
        else
            echo "${RED}[ERROR] Version of JDK is incorrect!${NC}" 1>&2;
            return 2;
        fi
    done

build: off
